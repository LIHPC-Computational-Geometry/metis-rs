searchState.loadedDescShard("metis", 0, "This crate provides a thin but idiomatic API around …\nThe dual of a mesh.\nContains the error value\nError type returned by METIS.\nBuilder structure to set up a graph partition computation.\nInteger type used by METIS, can either be an <code>i32</code> or an <code>i64</code>.\nInput is invalid.\nThe input arrays are malformed and cannot be safely passed …\nError raised when the graph data fed to <code>Graph::new</code> cannot …\nThe input arrays are malformed and cannot be safely passed …\nError raised when the mesh data fed to <code>Mesh::new</code> cannot be …\nMETIS hit an out-of-memory error.\nBuilder structure to set up a mesh partition computation.\nThe length of the <code>options</code> array.\nError type returned by <code>Graph::new</code>.\nError type returned by <code>Mesh::new</code>.\n<code>ncon</code> must be greater than 1.\n<code>nparts</code> must be greater than 1.\n<code>nparts</code> must be greater than 1.\nContains the success value\nMETIS returned an error but its meaning is unknown.\nFloating-point type used by METIS, can either be an <code>f32</code> or …\nThe result of a partitioning.\nGraph is too large. One of the array’s length doesn’t …\nMesh is too large. One of the array’s length doesn’t …\nThe adjacency array.\nThe adjacency index array, and the adjacency array as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate the dual graph of a mesh.\nCreates a new <code>Graph</code> object to be partitioned.\nCreates a new <code>Mesh</code> object to be partitioned.\nCreates a new <code>Graph</code> object to be partitioned (unchecked …\nCreates a new <code>Mesh</code> object to be partitioned (unchecked …\nFine-tuning parameter types.\nPartition the mesh using its dual graph.\nPartition the graph using multilevel k-way partitioning.\nPartition the mesh using its nodal graph.\nPartition the graph using multilevel recursive bisection.\nSets the weights of the edges.\nSets a fine-tuning parameter for this partitioning.\nSets a fine-tuning parameter for this partitioning.\nSets the fine-tuning parameters for this partitioning.\nSets the fine-tuning parameters for this partitioning.\nSets the target partition weights for each part and …\nSets the target partition weights for each part.\nSets the load imbalance tolerance for each constraint.\nSets the communication weights of the vertices.\nSets the communication weights of the elements.\nSets the computational weights of the vertices.\nSets the computational weights of the elements.\nThe adjacency index array.\nSpecifies if the connected components of the graph should …\nSpecifies the matching scheme to be used during coarsening.\nSpecifies that the graph should be compressed by combining …\nSpecifies that the partitioning routines should try to …\nEdge-cut minimization.\nSpecifies the amount of progress/debugging information …\nDerives a separator from an edge cut.\nFM-based cut refinement.\nGreedy-based cut and volume refinement.\nGrows a bisection using a greedy strategy.\nIndex of the option in the array from …\nDetermines the algorithm used during initial partitioning.\nMultilevel k-way partitioning.\nSpecifies that the partitioning routines should try to …\nSpecifies the number of different partitions that it will …\nSpecifies the number of iterations for the refinement …\nSpecifies the number of different separators that it will …\nSpecifies that the coarsening will not perform any 2-hop …\nGrow a bisection using a greedy node-based strategy.\nSpecifies the type of objective.\nTrait implemented by METIS’ options.\nSpecifies the minimum degree of the vertices that will be …\nSpecifies the partitioning method.\nDetermines the algorithm used for refinement.\nCompute a bisection at random followed by a refinement.\nMultilevel recursive bisection.\nRandom matching.\nSpecifies the seed for the random number generator.\nOne-sided FM refinement.\nTwo-sided FM refinement.\nSorted heavy-edge matching.\nSpecifies the maximum allowed load imbalance among the …\nTotal communication volume minimization.\nDisplays various statistics during coarsening.\nDisplay information related to the minimization of …\nDisplay information related to the elimination of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrints various diagnostic messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisplays various statistics during initial partitioning.\nDisplay detailed information about vertex moves during …\nDisplays various statistics during refinement.\nDisplay detailed information about vertex separators.\nPerforms timing analysis.\nConvert the value into metis’ format, for use with …")